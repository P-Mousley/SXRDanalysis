def combine_CTR(parts,scales,totscale,limits):
    """Combines individual scans of CTR sections into one dataset
    parts = array of filepaths to individual scan .dat files [filepath1,filepath2...etc]
    scales = array of individual section scale factors 
    totscale = total scale factor for overall dataset usually 1
    limits = array of snipping limit datapoint indexes for each section  either ['allpoints'] or [lowersnip,uppersnip]"""
    for i in arange(len(parts)):
        CTR_part=pd.read_csv('{}'.format(parts[i]), sep='\s+') #reads in data from dat file
        CTR_part['I']=CTR_part['I']*scales[i]*totscale #scales intensity according to scale factors
        print(len(CTR_part)) #print out check to see how many datapoints read in
        if limits[i][0]!='allpoints':
            CTR_part=CTR_part[limits[i][0]:limits[i][1]]  #if snipping limits set cut out unwanted points
            print(len(CTR_part))  #print out number of datapoints again to check that length of datapoints has been snipped properly
        else:
            print('no snip') #if no snipping limits set then print no snip message
        print('max L = {}\n limits= [ {} ]'.format(CTR_part['L'].max(), limits[i])) #optional to print limits used as L range
        if i==0:
            CTR_total=CTR_part  #for first part create total dataframe
        else:
            CTR_total=pd.concat([CTR_total,CTR_part]) #for rest of parts add data to existing dataframe

    return CTR_total


CTRdata=combine_CTR(parts00L,scales1,1,limits1).reset_index(drop=True) 
ctrshift=0 #shift entire set of L values for CTR to adjust for slight misaligment
CTRdataRT['newL']=CTRdataRT['L']+ctrshift #apply shift to dataframe to create newL column

CTRdataRT['F']=np.sqrt(CTRdataRT['I']) #set structure factor to square root of intensity
CTRdataRT['dF']=CTRdataRT['F']*0.1   #set errors to 10%, can be changed later on if symmetry averaging available
outdata=CTRdataRT[['H','K','newL','F','dF']] #choose data to right to file
outdata=outdata[((outdata['newL'])%2>0.05)&((outdata['newL'])%2<1.95)] #remove points within 0.05 of Bragg Lvalue. ****NEED TO CHANGE change limits and values according to where the L values occur in CTR
outdata['H']=-2  #set value to integer, as sometimes can be a trail of 9's e.g. 1.99999
outdata['K']=0   #set value to integer, as sometimes can be a trail of 9's e.g. 1.99999
outdata['flag']='00200.0' #setflag as specified in ROD manual
outdata.to_csv(r"***folder\filename****.dat",sep='\t',index=False) #save to .dat file 
